name: CI
on:
  pull_request:
  push:
    branches:
      - develop
      - develop-refactoring
env:
  RUST_BACKTRACE: 1

jobs:
  style:
    name: Check Style
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        rust:
          - stable
    steps:

    - name: Checkout
      uses: actions/checkout@v1
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        components: rustfmt

    - name: cargo fmt --check
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: --all -- --check

  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -Dwarnings
    strategy:
      fail-fast: true
      matrix:
        rust:
          - stable
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust (${{ matrix.rust }})
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Test
        uses: actions-rs/cargo@v1
        with:
            command: test
            args: "--workspace"

  dangling_check:
      name: Check dangling
      runs-on: ubuntu-latest
      env:
        RUSTFLAGS: -Dwarnings
        RUST_BACKTRACE: 1
      strategy:
        fail-fast: true
        matrix:
          rust:
            - stable
      steps:
        - name: Checkout
          uses: actions/checkout@v2

        - name: Install Rust (${{ matrix.rust }})
          uses: actions-rs/toolchain@v1
          with:
            profile: minimal
            toolchain: ${{ matrix.rust }}
            override: true

        - name: Test
          uses: actions-rs/cargo@v1
          with:
            toolchain: ${{ matrix.rust }}
            command: test
            args: "-p noah"

  parallel_check:
      name: Check parallel
      runs-on: ubuntu-latest
      env:
        RUSTFLAGS: -Dwarnings
      strategy:
        fail-fast: true
        matrix:
          rust:
            - stable
      steps:
        - name: Checkout
          uses: actions/checkout@v2

        - name: Install Rust (${{ matrix.rust }})
          uses: actions-rs/toolchain@v1
          with:
            profile: minimal
            toolchain: ${{ matrix.rust }}
            override: true

        - name: Test
          uses: actions-rs/cargo@v1
          with:
            toolchain: ${{ matrix.rust }}
            command: test
            args: "-p noah --features parallel"

  consistency_check:
      name: Check verifier parameters
      runs-on: ubuntu-latest
      env:
        RUSTFLAGS: -Dwarnings
      strategy:
        fail-fast: true
        matrix:
          rust:
            - stable
      steps:
        - uses: actions/checkout@v3
          with:
            fetch-depth: 0

        - name: Install Rust (${{ matrix.rust }})
          uses: actions-rs/toolchain@v1
          with:
            profile: minimal
            toolchain: ${{ matrix.rust }}
            override: true

        - name: Build verifier parameters
          uses: actions-rs/cargo@v1
          with:
            toolchain: ${{ matrix.rust }}
            command: run
            args: "--release -p noah --features=gen,no_vk --bin gen-params all ./api/parameters"

        - name: Check changed files in the parameters folder
          id: changed-files
          uses: tj-actions/changed-files@v32
          with:
            files: |
              ./api/parameters/**

        - name: List all changed files
          run: |
            for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
              echo "$file was changed"
            done

        - name: Break if any file(s) change
          if: steps.changed-files.outputs.any_changed == 'true'
          run: |
            exit 1
